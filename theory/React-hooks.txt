1. < useState >

useState를 써야하니 import해주자 import React {useState} from "react"

useState는 항상 2개의 value를 return함.

첫번째 value는 item이라고 이름을 주고, 두번째 value는 값을 변경하게 함. 

const [nickName, setNickName] = useState("");

이런식으로 선언할 수 있음. useState의 인자로 들어가는것은 State의 초기값임. ""는 공백을 의미 아무내용없음.

const [num, setNum] = useState(0);

숫자도 가능함. 초기값은 0으로 설정함.

컴포넌트의 return값으로 <h1>카운트 : {num}</h1>를준다. 그럼 초기설정한 0이 secreen에 표시된다.

setNum으로 값을 변경시킴. setNum() 안에 num을 넣어 변경식을 정해줌 setNum(num+1) 이런식으로.

숫자가아닌 텍스트도 가능함. 

const nameChange = e => {
    setName(e.target.value);
};

setName으로 e.target.value를 넣어줌. nameChange함수는 이벤트 파라매터를 받아 사용함.

<input value={name} onChange={nameChange} /> onChange로 함수로 연결시켜줌. 내부의 함수가아니기 때문에 this를 안썻음.

클래스형은 함수를 넣어줄 때, this.함수명으로 넣음.

<button onClick={add}>+</button> 숫자형도 onClick으로 함수로 연결해줌. 이렇게 useState를 사용함.

=============================================================================

1-1. < useInput >

useInput은 기본적으로 input을 업데이트함.

useInput 함수를 선언하자. 

useInput은 인자로 initValue를 받을거고 const [value, setValue] = useState(initValue); useState선언.

const App에는 input을 하나 만들어주자.

그리고 안에 선언해줌.   const name = useInput("Mr."); 이건 Mr.를 내이름의 기본값으로 설정한거임.
-> name으로 정의하고 거기엔 useInput에 Mr.라는 String형 인자를 주고 이건 함수로 들어가 initValue가됨.

useInput함수에서 reutrn되는 값이 const로 선언한 name에 들어감.

그리고 useInput함수는 return으로 {value}를 반환함. 

지금 name은 return 받은 value를 가지고있음. input에 value를 줘보자. value={name.value}
-> input에 Mr.이 기본으로 들어가있음.

여기서 return할 때, return value해버리면 name.value가 먹히지않음. value={name}으로해야함.

{}는 객체라고 이해하면 될것같다. const name = {value}가 될것이고. 이경우 name.value가 되야함.

그냥 return value면 const name = value 이기 때문에 name.value가 먹히지않음. 내생각임.

또는 그냥 {...name}으로 써도 가능함. 이건 name안에 있는 모든 것들을 풀어준다는 뜻임.

그리고 useInput안에도 함수를하나 더 만들어보자 const onChange = e => {} 이것또한 return 해줌 { value, onChange }

name은 { value, onChange }를 가지고있고 이것은 name.value, name.onChange로 사용할 수 있음.

줄여서 {...name}으로 사용한다. onChange 함수로인해 event.target.value를 얻을수있고 setValue에 넣어사용하면됨.

다음은 유효성검사를 넣어줄거임.

const useInput = (initValue, validator) => {
  const [value, setValue] = useState(initValue);
  const onChange = e => {
    const {
      target: { value }
    } = e;
    let willUpdate = true;
    if (typeof validator === "function") {
      willUpdate = validator(value);
    }
    if (willUpdate) {
      setValue(value);
    }
  };
  return { value, onChange };
};

function App() {
  const maxLen = value => value.length < 10;
  const name = useInput("Mr.", maxLen);

maxLen함수에서 조건으로 input에들어가는 value가 10자리 미만으로만 입력되게 조건을 건거임.

useInput에서 2개를 인자로받음. if문을 이용해 조건을 주고 validator(value)로 인해 값이 바뀔때마다 검사를함. 

10자리부터 false를 반환하기 때문에 더이상 setValue로 값이 바뀌지않음. 즉 길이가 10자리 미만만 입력됨.

=============================================================================

1-3. < useTabs >

API나 다른 어떤것으로부터 무언가를 가져온다고 가정하자.

그건 선언한 content에 배열형 객체로 들어갈거임. 우리의경우 연습이기 때문에 직접 넣어줄거임.

const content = [
  {
    tab: "section 1",
    content: "I'm the content of the Section 1"
  },
  {
    tab: "section 2",
    content: "I'm the content of the Section 2"
  }
];

const useTabs = (initialTab, allTabs) => {
  if (!allTabs || !Array.isArray(allTabs)) {
    return;
  }
 
  const [currentIndex, setcurrentIndex] = useState(initialTab);
 
  return {
    currentItem: allTabs[currentIndex],
    changeItem: setcurrentIndex
  };
};

function App() {
  const { currentItem, changeItem } = useTabs(0, content);

  return (
    <div>
      {content.map((potato, index) => (
        <button onClick={() => changeItem(index)}>{potato.tab}</button>
      ))}
      <div>{currentItem.content}</div>
    </div>
  );
}

이코드의 작동원리는 버튼을 누르면 해당버튼이 가지고있는 내용을 screen에 출력해주는거임.

일단 content를 map으로 지정하여 potato, index 인자를줌. index는 여기서 0, 1을 반환함 그리고 potato.tab은 section1,2를 버튼에남김.

useTabs함수에서 initialTab, allTabs를 인자로받고 이것은 0, content로 들어가게됨.

return으로 changeItem : setcurrentIndex로 줬으므로 changeItem(index)를 통해 onChange가 발생했을때 index값을 넘겨줄 수 있음.

값이 넘어가면  setcurrentIndex의 값이 바꼈으므로 state값이 바뀔거고, currentItem : allTabs[currentIndex]의 currentIndex또한 바뀔것이다.

=============================================================================

2. < useEffect >

useState처럼 useEffect도 import {useEffect} from "react"를 해줘야함.

useEffect는 componentWillUnmount와 componentDidMount, componentWillUpdate와 비슷함.

useEffect는 2개의 인자를 받는다. 

첫번째는 function으로써의 effect, 두번째는 배열안에 든값에 대하여 변화가 일어나면 useEffect가 실행됨.

function App() {
  const [number, setNumber] = useState(0);
  const [anumber, setAnumber] = useState(0);

  const hello = () => console.log("hi i am effect");

  useEffect(hello, [number]);

  return (
    <div>
      <div>HI</div>
      <button onClick={() => setNumber(number + 1)}>{number}</button>
      <button onClick={() => setAnumber(anumber + 1)}>{anumber}</button>
    </div>
  );
}

다음과 같은 코드는 버튼을 누르면 number와 anumber를 1씩 증가시켜주는 식임.

useEffect에는 hello함수를 전해줬고. useEffect는 mount될때 hello함수를 출력하고

[] 배열에 number가 있으니 number버튼을 누르면 또 hello를 실행시킨것이다. 어떤 경우도 실행시키고 싶지 않다면 [] 빈배열을 주면됨.

mount일때는 무조건 실행

=============================================================================

2-1. < useTitle >

useTitle은 useEffect를 사용한거임.

const useTitle = init => {
  const [title, setTitle] = useState(init);

  const updateTitle = () => {
    const htmlTitle = document.querySelector("title");
    htmlTitle.innerText = title;
  };

  useEffect(updateTitle, [title]);

  return setTitle;
};

function App() {
  const titleUpdater = useTitle("Loading...");
}

다음코드를 보자. 일단 document.querySelector("title")은 haed에 있는 title을 가져오는거임 브라우저의 이름으로 표시되는 것.

시작은 titleUpdater부터 시작함. 이건 useTitle에 인자로 "Loading..." 라는 스트링을 보냄.

useTitle로 들어가서 해당 "Loading..."인자는 init이 되고. useState에의해 초기 title값이 "Loading..."가됨.

useState에 의해 title값이 바꼇으니, 그 값은 updateTitle 함수로 들어가게되고 쿼리셀렉터로 따온 title 태그에 

가져온 title값을 넣게됨. updateTitle이 실행이되는 계기는 useEffect(updateTitle, [title]); 때문임.

useEffect는 컴포넌트가 mount될 때, updateTitle함수를 부를거고, title이 업데이트되면 updateTitle을 다시 부름.

updateTitle은 return setTitle을 해줌. setTitle은 title값을 변경하기위해 return 해주는거임.

*** titleUpdater는 setTitle과 동일함.

=============================================================================

2.2 < useClick >

useClick을 사용하기 앞서, reference를 해볼거임 ref.

ref는 기본적으로 우리의 컴포넌트의 어떤 부분을 선택하는 방법임. document.getElementByID()처럼.

react에 있는 모든 컴포넌트는 reference element를 가지고있음. 

function App() {
  const input = useRef();

  setTimeout(() => console.log(input), 2000);

  return (
    <div>
      <input ref={input} placeholder="test" />
    </div>
  );
}

이렇게 input tag의 ref로 const input을 넣어주고 . 2초후 console.log(input)을 해보자.

Object {current: HTMLInputElement}
current: 
<input placeholder="test"></input>

객체로 보여주고 그안에 current값에 우리가 쓴 iuput이 있음.

조금더 명확하게 하기위해 console.log(input.current)로함.

setTimeout(() => input.current.focus(), 2000); 이런식으로 2초후 input이 focus되게 할 수도 있음.

이제 useClick을 해보자.

const useClick = onClick => {
  const element = useRef();

  useEffect(() => {
    if (element.current) {
      element.current.addEventListener("click", onClick);
    }
  });

  return element;
};

function App() {
  const title = useClick();

  return (
    <div>
      <h1 ref={title}>Hi</h1>
      <input placeholder="test" />
    </div>
  );
}

useClick() 함수를 담은 title이 존재함. 

useClick은 useRef()를 return해줌. const title은 h1태그에서 ref={title}하여 상호작용할 수 있음.

const title = h1임.


const sayHello = () => {console.log("hello"); }; 해당 함수를 선언하고 title의 useClick함수에 인자로 넣어주자.

이건 useClick함수에서 onClick으로 인식됨.

useEffect함수를 써서 element.current가 있으면 element.current에 addEventListener를 달아줌. element.current는 현재 h1태그임.

ref와 title함수와 useClick이 상호작용을 하는거임.

title은 ref로 h1태그를 담고있고 그 title은 useClick 함수의 return값을 받음. 그 return 값은 내부에서 정해준 element임.

element를 통해 ref로 상호작용이 가능해짐.

componentWillUnmount될 때, useEffect에서 부여한 addEventListener를 지워줘야함.

useEffect는 componentDidmount 상태에 동작함. 우리의 경우엔 addEvent해준거.

sayhello를 가진 useClick이 mount 되었을 때, click 이벤트를 추가해주고

두번째로 받는 dependency. 즉 첫번째 인자(함수)에 대한 업데이트가 발생했을때. 아무것도 하지않아도 되기때문에 빈배열을 반환 [].

그리고 useEffect는 mount, willUpdate와 그리고 또 willUnmount 때 발생하는데.

return () => {
      if (element.current) {
        element.current.removeEventListener("click", onClick); 
	}
};

이부분이 willUnmount때 발생할거임. 

다시 정리해서 보면, useEffect에 첫번째인자(함수)를 넣으면, Didmount와 Didupdate때 호출 될거고 ( dependency가 [], 존재하지 않는 한 )

만약 dependency가 존재하면 

if (element.current) {
      element.current.addEventListener("click", onClick);
    }

이부분은 DidMount일 때만 호출된다.

그리고 return을 할 때 함수를 return 한다면 Unmount가 발생한다.

component가 mount 되었을 때, 이벤트리스너를 달아줄거고, dependency가 없기 때문에 영원하다.

dependency를 넣지않고 [], 아예 없애버린다면( 빈배열을 아예적지않는다는 뜻 )

매번 update 될때마다 eventListener가 추가됨.

dependency로 []를 넣어주는 의미는 DidMount때 단 한번만 실행되라는 의미임.

그리고 function을 return하는데 이건 willUnmount에서 발생. 이렇게 하는이유는 컴포넌트가 mount되지 않았을때

eventListener가 배치되게 하고 싶지 않기 때문.

=============================================================================

2.3 < useConfirm & usePreventLeave >

useConfirm. confirm함수를 쓰는것. 

이건 useState나 useEffect를 쓰지않는 hook임.

confirm(String) 은 alert처럼 알림창이 나오면서 String문구를 표시해줌.

const useConfirmer = (text, callback) => {
  if (typeof callback !== "function") {
    return;
  }
  const ConfirmFun = () => {
    if (confirm(text)) {
      callback();
    }
  };

  return ConfirmFun;
};

function App() {
  const res = () => console.log("Success !");
  const test = useConfirmer("really?", res);

  return (
    <div>
      <button onClick={test}>push</button>
    </div>
  );
}

useConfirmer는 인자로 text스트링과 callback 함수를 받음.

callback이 함수형이 아니면 내용없이 return을 보내고 끝냄.

해당 조건문을 통과하면 confirmFun 함수로 들어감.

confirm(text)를 지나면 callback함수를 실행. 

confirmFun 함수를 return함.

App내부에선 callback이름으로 들어갈 인자인 함수 res. 

그리고 test에 useConfimer함수의 return값을 저장함.

test는 confirmFun과 같음.

button의 onClick={test}로 지정해주면서 누를때 test가 실행됨.

취소했을때도 지정해줄 수 있음.

const resCancel = () => console.log("Cancel !"); 함수를 useConfimer에 인자로줌.

그리고 if(confirm(text))일때 알림창이뜨고 yes를하면 callback()을실행. no를 누르면 else로 들어가므로 else로 resCancel()을 실행시켜주면됨.

이런 코드가 함수형 프로그래밍임. 

어떤 어려운 클릭의 결과라도 사용자를 보호할 수 있음.

-------------------------------------------------------------------------

usePreventLeave 

이건 내가 웹 사이트 창을닫을때, 아직 저장하지 않았다 ! 라고 알림창을 띄우는 경우.

윈도우창을 닫을때 이사이트에서 나가겠습니까 ? 이런식의 알림창을 띄우기위해 사용되는 것은 addEventListener("beforeunload",function()) 임.

그리고 event.returnValue = "" 을 꼭넣어줘야함.


const usePreventLeave = () => {
  const listener = e => {
    e.preventDefault();
    e.returnValue = "";
  };

  const formProtect = () => window.addEventListener("beforeunload", listener);
  const formUprotect = () =>
    window.removeEventListener("beforeunload", listener);

  return { formProtect, formUnprotect };
};

function App() {
  const { formProtect, formUnprotect } = usePreventLeave();
  return (
    <div>
      <button onClick={formProtect}>Protect</button>&nbsp;&nbsp;&nbsp;&nbsp;
      <button onClick={formUnprotect}>Unprotect</button>&nbsp;&nbsp;&nbsp;&nbsp;
    </div>
  );
}

두개의 버튼을 눌렀음. 나갈때 물어보는 경우를 protect. 그리고 그 event를 지우는 Unprotect버튼.

usePreventLeave()함수를통해 formprotect, formUprotect를 return받음.

protect버튼을 누르고  사이트를 나가면 알림창이 뜸. 취소하고 계속 시도해도 알림창이 뜸.

Unprotect버튼을 누르면 해당 이벤트가 사라지기 때문에 사이트를 나가려고 하면 바로나가짐.

=============================================================================

2.4 < useBeforeLeave >

마우스가 페이지를 벗어날때 함수를 실행시키는것.

const useBeforeLeave = onBefore => {
  if (typeof onBefore !== "function") {
    return;
  }

  const handle = event => {
    const { clientY } = event;

    if (clientY <= 0) {
      onBefore();
    }
  };

  useEffect(() => {
    document.addEventListener("mouseleave", handle);
    return () => document.removeEventListener("mouseleave", handle);
  }, []);
};

function App() {
  const begForLife = () => console.log("dont leave");
  useBeforeLeave(begForLife);
  return <h1>1</h1>;
}

useBeforeLeave는 벗어나는게 없으니 App내부에서 선언할때 그냥 함수를 선언하고 안에 인자로 begForLife만 넣어주면됨.

clientY는 내가 마우스를 위로 했을때 받는 좌표고 해당코드는 마우스가 위로벗어날 때만 onBefore을 실행시키도록 하는거임.

componentWillUnMount때는 이벤트를 지우게 했고(return 으로 함수를보내는것)

그리고 계속해서 이벤트가 document에 추가되는걸 막아주기위해 useEffect의 두번째 인자로 [] 빈배열을줌. 이 뜻은 오로지 한번만 실행한다는뜻.

=============================================================================

2.5-1 < useFadeIn >

기본적으로 하나의 element를 가지는데, 자동으로 서서히 나타나게 만들거임. 지연시키거나 뭐든 할 수 있음.

animation을 우리 hooks에 포함시키는 방법을 알아보는것이다. hooks와 animation을 섞는거임.

const useFadeIn = (duration = 1, delay = 0) => {
  if (typeof duration !== "number" || typeof delay !== "number") {
    return;
  }

  const element = useRef();

  useEffect(() => {
    if (element.current) {
      const { current } = element;
      current.style.transition = `opacity ${duration}s ease-in-out ${delay}s`;
      current.style.opacity = 1;
    }
  }, []);
  return { ref: element, style: { opacity: 0 } };
};

function App() {
  const fadeInH1 = useFadeIn(1, 2);
  const fadeInP = useFadeIn(5, 10);

  return (
    <div>
      <h1 {...fadeInH1}>Hello</h1>
      <p {...fadeInP}> blabla blablalba </p>
    </div>
  );
}

h1, p 태그 2개가 애니메이션이 적용될 내용들임.

... 문법은 spread 문법임. fadeInH1과 fadeInP에 사용됐는데 이건 이것들이 가진 모든것을 풀어준다는 거임.

useFadeIn이 return하는 것이 해당 변수로 들어가게되고, return 되는것은 ref : element, style: {opacity: 0} 임.

element.current로 접근가능한것은 위에 선언된 const element = useRef();로 인해 가능.

useFadeIn함수, App에 선언된 const fadeInH1같은 변수, App이 스크린을 통해 리턴할 태그(h1, p)등에 ref로 접근했기때문에

상호작용이됨. 그외 코드는 current로 애니메이션으로 접근한것.

2.5-2 < useNetwork >

useNetwork는 navigator가 online 또는 offline이 되는걸 막아주는거임.

useNetwork가 할일은 function을 부르는거임.

const useNetwork = onChange => {
  const [status, setStatus] = useState(navigator.onLine);

  const handleChange = () => {
    if (typeof onChange === "function") {
      onChange(navigator.onLine);
    }
    setStatus(navigator.onLine);
  };

  useEffect(() => {
    window.addEventListener("online", handleChange);
    window.addEventListener("offline", handleChange);

    return () => {
      window.removeEventListener("online", handleChange);
      window.removeEventListener("offline", handleChange);
    };
  }, []);

  return status;
};

function App() {
  const handleNetworkChange = online => {
    console.log(online ? "온라인" : "오프라인");
  };
  const onLine = useNetwork(handleNetworkChange);

  return (
    <div>
      <h1>{onLine ? "online" : "offline"}</h1>
    </div>
  );
}

navigator.onLine 으로 나의 네트워크상태를 true, false로 확인할 수 있음.

useState로 기본값을 navigator.onLine으로 줌. 인터넷에 연결되어있을거니 true임. status는 true로 초기화됨.

handleChange에 의해 useNetwork가 인자로 받은함수에 다시 navigator.onLine 값을 주고, setStatus로 navigator.onLine을 갱신해줌.

useEffect는 업데이트 될 때 window에 이벤트를 추가해줄거고 (online,offline이 발생할 때)

이벤트가 발생이되면 handleChange로 감. 

return으로 remove해줌 (unmount). 계속 업데이트하지 않을거기 때문에 dependency를 []로.

App에선 onLine으로 변수선언하고 거기에 useNetwork에서 return받은 값을 넣어줌. 인자로 들어갈 함수는

handleNetworkChange가 될거고. 이함수는 또 내부에서 인자를 받아 실행됨.
